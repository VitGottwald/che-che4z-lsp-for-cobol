name: NativeBuild-Linux-Only

# Controls when the workflow will run
on:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  generateConfigForNativeBuilds:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.0'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
      - name: Generate assisted configuration for GraalVM native build
        working-directory: server
        run: mvn -e -B -Pnative -Dagent=true test
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: configuration
          path: server/engine/target/native/agent-output/test/*

  nativeBuildOnLinux:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
    runs-on: ${{ matrix.os }}
    needs: [generateConfigForNativeBuilds]
    steps:
      - shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.0'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
      - name: Retrieve native build configurations
        uses: actions/download-artifact@v3
        with:
          path: configuration
          name: configuration
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: configuration
      - name: Add graalVM configuration to server
        run: |
          cp -rp configuration/session-*/ server/engine/src/main/resources/META-INF/native-image/
          rm server/engine/src/main/resources/META-INF/native-image/session-*/jni-config.json
      - name: Install musl C library tools
        run: apt-get install musl-tools
      - name: Build with Maven
        working-directory: server
        env:
          CC: musl-gcc
        run: mvn -e -B -Pnative -Dagent=true -DskipTests clean package
      - name: Upload artifacts
        run: mkdir staging && cp server/engine/target/engine staging/${{ env.target }}
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: package-linux
          path: staging
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: jar
          path: |
            server/engine/target/server.jar
            server/dialect-idms/target/dialect-idms.jar

  buildVsixWithNativeSupport:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            npm_config_arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            npm_config_arch: arm64
    runs-on: ${{ matrix.os }}
    needs: [testClient]
    steps:
      - uses: actions/checkout@v3
      - shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: Retrieve native images
        uses: actions/download-artifact@v3
        with:
          path: staging
      - name: configure server jar
        working-directory: clients/cobol-lsp-vscode-extension
        run: |
          cp -R ../../staging/jar/engine/target/server.jar ./server/jar
          cp -R ../../staging/jar/dialect-idms/target/dialect-idms.jar ./server/jar/dialects
      - name: configure linux executable
        working-directory: clients/cobol-lsp-vscode-extension
        if: startsWith( matrix.os, 'ubuntu')
        run: |
          cp -p ../../staging/package-linux/${{ env.target }} ./server/native
          mv ./server/native/${{ env.target }} ./server/native/server-linux
          chmod +x ./server/native/server-linux
      - name: build client
        run: npm ci
        working-directory: clients/cobol-lsp-vscode-extension
      - name: generate vsix for ${{ env.target }}
        working-directory: clients/cobol-lsp-vscode-extension
        run: |
          npm run package  -- --target ${{ env.target }}
          cp *.vsix ../../.
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: ${{ env.target }}
          path: '*.vsix'

